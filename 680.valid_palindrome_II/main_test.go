package main

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestValidPalindrome(t *testing.T) {
	tests := []struct {
		name   string
		input  string
		output bool
	}{
		{"example1", "aba", true},
		{"example2", "abca", true},
		{"example3", "abc", false},
		{"example4", "tcaac", true},
		{"example5", "tebbem", false},
		{"example6", "chldgwrinywkcbkgevaorfndrjysvcpbqmybztrdrpszyjjffinpkfzakqvkvxxiqjcjpcnbhaqxdgcoqoajpwqftvnmnjcltisocufjpqquvfnlylyrbvfhjxqungoedsmhrooxijmxcxatyrymiqimpmrsbkvzaomztdwaahwyesgefgbdqhbvdsmfxmypcejjvhjbiitbrqjcmqiavrueshuhqgzucgmgsbconklortytyzlkhgfmmdejqnczhhgpwlcduawgignknohjqxklzzgunanhadatukgcxadesddtjoqzwgzuuqaixxecomzoxhdpsxbcqecliopvcrczeivmpsvfeimioddzbaaryytesuaovdwdordwdfznjzslgqtlfnavyftvzbttwpgrlhoxtjvgfncurlgecyhiabvrkcwhhhfoatvbwmuhvdsnizuebhnxwjdrlodbrammekzjxzjfmxnolfmdodlnofdghfhuanflokwgjxbfeqhohayfeklhbmmtbtccjpqptxvizrbpgmiyuszwrfkgvhflvfdbybdwpxikllwrwdkddbtegdlixzpytikaifysuqyhjkvqrrlzkzrcxpqekbbpvvxzeolxezfxkkdlrfxpefvqpbitnwscznbbhmomuskoepjooufuseajzsnonfiztorltmibzevtcrpioalvhhpejdilcvnsetuavhbsynwevbttbjxuicsyfplhaasljapjdwzcvbujlshllhndykmaywnbrqdvzggmmlsjknssgkbfcjdigcrrmjjattybkrmqjmuucvhmmokvsnlqujhlopfsxumefurorjvbghjbktymltlyuzgvfblcifitinsappdrmrtmdwxfjrulobkzeypnftmwnqiaehlkgcrifeedjdbprqjypbfoywybyolnfavsbfdmwmygrylwsbqppltqwbphbvingxpiwrhxyzwckmzezzjwnlcurdowgtweijdyongmrzgtmujvkumvtdblmjylbsbszklnhiwujrbsijtsttfjwsmxutftcndwwpwgtsawthigorubpkmtjyuslhfhlkhlqwzrkvcqicamphwfmebszddnbxuyyxymzfurxwgzxxusgvtezimbbkodytipcagglworeeandoksrgvyxuysgmckymmgncrsxkplgxipssylgajezprqthcjrrljydfxjgzjdfkvpdpbpyesjzscmmnzycbuymztuqoybolgefzahctltgauwnfarxwkqnjczfouywouvzfxjhpxryviuiciqxwvhsnjeijuuqgkdeyllrxcazpgeiaxuxxzgdefdfkyzooeptrsyyobtcysnxzzdhmtbxqtsrkcfxcsackjxzhbhkdbzlydkgyyezrydcizozhhqszkysspoogdnqicparafirmseprtnubdxqqemnaaocqzzpehjwshdnpppsbgpgjqzcuhszmbhcadnrwcdgnuekpofqixfxymdcnavctwctthhggrumpftuwkkngnwzdzboizsyyxhzrvahenbxpidfhdomqndwwzzjskuexbvwykdwrxismycrsyybpsvgxwrkukmvdtdujrihjksaqjndckoexpmodbbqciysjfbsckjydrtlttkwguozqakhuotfdrpwpgvjffpkudimqpafvftxyssintybrbvyxinnukermehkvoeyfvkqimwbbmktspvseybwwhldyuqyadxfxtxcgixweekjxhhzmqyqlajegpbvjektwyiarnculchdvpufyrldnlypetaocwucprhwxjpcbquqwbohxdjminuftjhrwiliimtfhgbygmaojipqjzdhqqipsjcaaqymindstdhwggwxaedbrdbliqwtwgdurnnplbhhtopcyrziympeytmapofqvcxzjrbsmxcuexmjabwwsrfjwygcvtcsidmobekzidzelbtyrdnbxmgpnqetvojfocllycumqciaetqsdpmxgpdobfwtezqlqadfvowgvymvraemqnsfstwfqoqszrerkrxdeyplbdrbgquzordfvhaqrynepexhrzpxswxjryjrpuooxbxvxzldviufxjhfvvjgprdjzpntbiwwovwjkzlqzyfgqouodzqghtbpibiwkxuzdupkuednigbxygbzwcgutglsukjxayedwrusrztfocrmlnovgwshhaafqduylkldddxvqrbuueluzbbejwwexcbwaqhsbwdpmynbyfgxlmbflvunereoaluywyvxfophfnpvwssrlfzwbuvzddmlenwdqjjmvwzqbhajvccdxwrrvcdyaxlrfvbcdsnrsdrcjzmppkgtqtuczcaktbfowqvemvoroqohtpzutqnetbzcsdeasaiijtaydfomowrttyvrxfacgregopsjbqdwtnmuywfilqdweargjbfmevivmgpzxqqbddqrobrylmtmtfhvsahyewqfwsioawzvgkqetqblcxbrdjpvffqyxoajdnchlxumldgnjwflprelijekppnppfiwldyezysjvsnxeebkubouujvgiabmlsbltdpaupuswxieopgumhoavyjvtmrhumuazzkrblojtifnandzxnmklfngsnuckyjllilpwjrpkaoxytbpafwppwlsmfvqdfxspkxrciluzzppcpsjyccnmabmujmnvdunniqfkuhkkxjspfsyuvfcumuurkemfgzndnqugodmuyzkphootwhevutaldqgcgenrkjmymghbifrgeyyjxxwmmcdzxlkbrurvkzmsuyuilwoukoowcdzxppywwbjqclmpkncbegqoksycglpeihizctmjrnamyotlvudqjzicintashtgcblgbmarjuncklxxwuatulgeawlihfpdgjaexwsokdboagwynjjfridcfgbvvvubmdxuqbkrwkojanzlwzhdghviczesjnttqexguuutthsrhafgigxgvigvmovsedrzzlmemxhjthojufmjsocqdcqxpdbflyyylknoxsoqutxhbabjxnagczqyouxfpuskwvbapfboozjztbazytehetiokydygdpovnxhukdqexjfvzsvcnhkimtmamsseiabxoeaijpzhymkkgudjrhvhzxyecltvhrmlvigopcsmgidvwjriwscltnzjetrbbaakzwecuzajbiwgsroficxjwoblergzyhjcvexbeckeaghlwirtuatokdqtntovjgdditbgmoxgqfqhfcqgyvvdunifrmviefwzqupahjcxvdposecoonilxcccmljtfhqmvdgjovxnbkoudraakjcncetvwxoierhkydnjrdwuzmbqcveoexvcqbpatopwtiqkexpfpeqgoudkfijypagsemnxpfjpajlzawzwqonnorhzryxiexgzicgyrwhdkrbzbhdxdgjyndhofptpajranfkempyigcxbzmmhqrohgghnayumbmbmtfdrxsmxtqvtbzhmolqgctuixkdhiquowjizucsxgoczlqopdzlvfqrpyqzylrdnaishwrdgukttikbbclhaceizncbirggmxvwizeeyvdgtjfhazzbayerfexeplgysuqckcrswumhksuciyqniytznjhzpapbuuicgavpqwyugayojcikqfmbetxvctnutkjmglbwfnieqewqwfeopmxwnpeplbmfgkmesjngipnepzhtixmdzglgwfqjvoawadybcejyqxseazpzoddudcvzlaqjhlyysnycborlgdlrnivvevhyujowhyxfuvrlrenartwnhppbcwjzbwpdrqbybtpalgsyovoidnwdjovoxpwjlbsuhjnrzznatspoyyyotgqwdxbfrkeepffrwrtimdttkdqqqcydgznnrdjkwsedwyusudwarnnlueyepirvucuopgsgyxleebiebsrgpysjvqpdjvnwwnphnoixglunkjdhzhsbffdltwmvpmntzvxokgzttwyszlmmzjeqwvrzbbokyuoxnunztgdtjuhimfbmfcnormiqmadrnsoxkxjkuqniwczcogvtyixpcdbrkbbpubuqixnbuiawvjactjtqseowhxwfgcbrfapcjhbemlohtfhmuqevdssctjkbsvovtmvytcxywsdpwrehatbzeggqgibgxmufdeflnbgjgxbgksbuifquxqhvyirqyrkghkvhdpsmujejyzvqrmmbxurtlmimtalseikyqusaonfmkvzccguhvpzpqvxxminswqbufmlxekhvfgenuxbygsalafgchivxteebnkdxafnekphqhbawdtohtlrqmsgfwltpnqwabnnxcgcvpddhgpdjemfhastlyvzcbpxlizqinijxntpvsgigpmxerdtcgljiqgnuihujsthtulbmhvqkoigvnqtkosvsvdwfyyqvpcxtoiiahpyvbwmrmfnrbcmdokrlttqaysdwfdlhvuoshwapsgqopnutazswqzrdwwkzeoegmbusyogplyfwxxsxpannsctymckbspmrkxpitsxxdyeqcjkiqpsgsmxmoidcipzpjwetzmvxnvwnqsoabstfvqwbgzpuegcmrucydgkyrcyezezjwchjybvdrfxqgteillressopdpdgxjsbkachvxqmrxxaoihdpkaxlxdhqhiudhglbnscczldgqigffoctsjwvdotwrrnoxprzppactmlkjxclysavtgyrlidhhbxwbratvhfhtzwsrbejniodeassnlallhqtpuobhmhemvgjrmtsdewppsrjmqibnmwwuqvfwdplchuvecbvgfsquemqrokiwungjainmizxgijlldnjwcjlkunyloiingepyxtbwzagreeegkbumgahnipfwkddkwfpinhagmubkgeeergazwbtxypegniiolynukljcwjndlljigxzimniajgnuwikorqmeuqsfgvbcevuhclpdwfvquwwmnbiqmjrsppwedstmrjgvmehmhbouptqhllalnssaedoinjebrswzthfhvtarbwxbhhdilrygtvasylcxjklmtcappzrpxonrrwtodvwjstcoffgiqgdlzccsnblghduihqhdxlxakpdhioaxxrmqxvhcakbsjxgdpdposserllietgqxfrdvbyjhcwjzezeycrykgdycurmcgeupzgbwqvftsbaosqnwvnxvmztewjpzpicdiomxmsgspqikjcqeydxxstipxkrmpsbkcmytcsnnapxsxxwfylpgoysubmgeoezkwwdrzqwszatunpoqgspawhsouvhldfwdsyaqttlrkodmcbrnfmrmwbvyphaiiotxcpvqyyfwdvsvsoktqnvgiokqvhmbluthtsjuhiungqijlgctdrexmpgigsvptnxjiniqzilxpbczvyltsahfmejdpghddpvcgcxnnbawqnptlwfgsmqrlthotdwabhqhpkenfaxdknbeetxvihcgfalasgybxunegfvhkexlmfubqwsnimxxvqpzpvhugcczvkmfnoasuqykieslatmimltruxbmmrqvzyjejumspdhvkhgkryqriyvhqxuqfiubskgbxgjgbnlfedfumxgbigqggezbtaherwpdswyxctyvmtvovsbkjtcssdvequmhftholmebhjcpafrbcgfwxhwoesqtjtcajvwaiubnxiqubupbbkrbdcpxiytvgoczcwinqukjxkxosnrdamqimroncfmbfmihujtdgtznunxouykobbzrvwqejzmmlzsywttzgkoxvztnmpvmwtldffbshzhdjknulgxionhpnwwnvjdpqvjsypgrsbeibeelxygsgpoucuvripeyeulnnrawdusuywdeswkjdrnnzgdycqqqdkttdmitrwrffpeekrfbxdwqgtoyyyopstanzzrnjhusbljwpxovojdwndiovoysglaptbybqrdpwbzjwcbpphnwtranerlrvufxyhwojuyhvevvinrldglrobcynsyylhjqalzvcduddozpzaesxqyjecbydawaovjqfwglgzdmxithzpenpignjsemkgfmblpepnwxmpoefwqweqeinfwblgmjktuntcvxtebmfqkicjoyaguywqpvagciuubpapzhjnztyinqyicuskhmuwsrckcqusyglpexefreyabzzahfjtgdvyeeziwvxmggribcnziecahlcbbkittkugdrwhsiandrlyzqyprqfvlzdpoqlzcogxscuzijwouqihdkxiutcgqlomhzbtvqtxmsxrdftmbmbmuyanhgghorqhmmzbxcgiypmekfnarjaptpfohdnyjgdxdhbzbrkdhwrygcizgxeixyrzhronnoqwzwazljapjfpxnmesgapyjifkduogqepfpxekqitwpotapbqcvxeoevcqbmzuwdrjndykhreioxwvtecncjkaarduokbnxvojgdvmqhftjlmcccxlinoocesopdvxcjhapuqzwfeivmrfinudvvygqcfhqfqgxomgbtiddgjvotntqdkotautriwlhgaekcebxevcjhyzgrelbowjxciforsgwibjazucewzkaabbrtejzntlcswirjwvdigmscpogivlmrhvtlceyxzhvhrjdugkkmyhzpjiaeoxbaiessmamtmikhncvszvfjxeqdkuhxnvopdgydykoitehetyzabtzjzoobfpabvwksupfxuoyqzcganxjbabhxtuqosxonklyyylfbdpxqcdqcosjmfujohtjhxmemlzzrdesvomvgivgxgigfahrshttuuugxeqttnjsezcivhgdhzwlznajokwrkbquxdmbuvvvbgfcdirfjjnywgaobdkoswxeajgdpfhilwaeglutauwxxlkcnujrambglbcgthsatnicizjqduvltoymanrjmtczihieplgcyskoqgebcnkpmlcqjbwwyppxzdcwookuowliuyusmzkvrurbklxzdcmmwxxjyyegrfibhgmymjkrnegcgqdlatuvehwtoohpkzyumdoguqndnzgfmekruumucfvuysfpsjxkkhukfqinnudvnmjumbamnccyjspcppzzulicrxkpsxfdqvfmslwppwfapbtyxoakprjwplilljykcunsgnflkmnxzdnanfitjolbrkzzaumuhrmtvjyvaohmugpoeixwsupuapdtlbslmbaigvjuuobukbeexnsvjsyzeydlwifppnppkejilerplfwjngdlmuxlhcndjaoxyqffvpjdrbxclbqteqkgvzwaoiswfqweyhasvhftmtmlyrborqddbqqxzpgmvivemfbjgraewdqlifwyumntwdqbjspogergcafxrvyttrwomofdyatjiiasaedsczbtenqtuzpthoqorovmevqwofbtkaczcutqtgkppmzjcrdsrnsdcbvfrlxaydcvrrwxdccvjahbqzwvmjjqdwnelmddzvubwzflrsswvpnfhpofxvywyulaoerenuvlfbmlxgfybnympdwbshqawbcxewwjebbzuleuubrqvxdddlklyudqfaahhswgvonlmrcoftzrsurwdeyaxjkuslgtugcwzbgyxbgindeukpudzuxkwibipbthgqzdouoqgfyzqlzkjwvowwibtnpzjdrpgjvvfhjxfuivdlzxvxbxoouprjyrjxwsxpzrhxepenyrqahvfdrozuqgbrdblpyedxrkrerzsqoqfwtsfsnqmearvmyvgwovfdaqlqzetwfbodpgxmpdsqteaicqmucyllcofjovteqnpgmxbndrytblezdizkebomdisctvcgywjfrswwbajmxeucxmsbrjzxcvqfopamtyepmyizrycpothhblpnnrudgwtwqilbdrbdeaxwggwhdtsdnimyqaacjspiqqhdzjqpijoamgybghftmiiliwrhjtfunimjdxhobwquqbcpjxwhrpcuwcoatepylndlryfupvdhclucnraiywtkejvbpgejalqyqmzhhxjkeewxigcxtxfxdayquydlhwwbyesvpstkmbbwmiqkvfyeovkhemrekunnixyvbrbytnissyxtfvfapqmidukpffjvgpwprdftouhkaqzougwkttltrdyjkcsbfjsyicqbbdompxeokcdnjqaskjhirjudtdvmkukrwxgvspbyysrcymsixrwdkywvbxeuksjzzwwdnqmodhfdipxbnehavrzhxyysziobzdzwngnkkwutfpmurgghhttcwtcvancdmyxfxiqfopkeungdcwrndachbmzshuczqjgpgbspppndhswjhepzzqcoaanmeqqxdbuntrpesmrifarapciqndgoopssykzsqhhzozicdyrzeyygkdylzbdkhbhzxjkcascxfckrstqxbtmhdzzxnsyctboyysrtpeoozykfdfedgzxxuxaiegpzacxrllyedkgquujiejnshvwxqiciuivyrxphjxfzvuowyuofzcjnqkwxrafnwuagtltchazfeglobyoqutzmyubcyznmmcszjseypbpdpvkfdjzgjxfdyjlrrjchtqrpzejaglysspixglpkxsrcngmmykcmgsyuxyvgrskodnaeerowlggacpitydokbbmizetvgsuxxzgwxrufzmyxyyuxbnddzsbemfwhpmaciqcvkrzwqlhklhfhlsuyjtmkpburogihtwastgwpwwdnctftuxmswjfttstjisbrjuwihnlkzsbsblyjmlbdtvmukvjumtgzrmgnoydjiewtgwodruclnwjzzezmkcwzyxhrwipxgnivbhpbwqtlppqbswlyrgymwmdfbsvafnloybywyofbpyjqrpbdjdeefircgklheaiqnwmtfnpyezkbolurjfxwdmtrmrdppasnitificlbfvgzuyltlmytkbjhgbvjrorufemuxsfpolhjuqlnsvkommhvcuumjqmrkbyttajjmrrcgidjcfbkgssnkjslmmggzvdqrbnwyamkydnhllhsljubvczwdjpajlsaahlpfysciuxjbttbvewnysbhvautesnvclidjephhvlaoiprctvezbimtlrotzifnonszjaesufuoojpeoksumomhbbnzcswntibpqvfepxfrldkkxfzexloezxvvpbbkeqpxcrzkzlrrqvkjhyqusyfiakitypzxildgetbddkdwrwllkixpwdbybdfvlfhvgkfrwzsuyimgpbrzivxtpqpjcctbtmmbhlkefyahohqefbxjgwkolfnauhfhgdfonldodmflonxmfjzxjzkemmarbdolrdjwxnhbeuzinsdvhumwbvtaofhhhwckrvbaihyceglrucnfgvjtxohlrgpwttbzvtfyvanfltqglszjnzfdwdrodwdvoausetyyraabzddoimiefvspmviezcrcvpoilceqcbxspdhxozmocexxiaquuzgwzqojtddsedaxcgkutadahnanugzzlkxqjhonkngigwaudclwpghhzcnqjedmmfghklzytytrolknocbsgmgcuzgqhuhseurvaiqmcjqrbtiibjhvjjecpymxfmsdvbhqdbgfegseywhaawdtzmoazvkbsrmpmiqimyrytaxcxmjixoorhmsdeognuqxjhfvbrylylnfvuqqpjfucositlcjnmnvtfqwpjaoqocgdxqahbncpjcjqixxvkvqkazfkpniffjjyzsprdrtzbymqbpcvsyjrdnfroavegkbckwynirwgdlhcb", true},
		{"example7", "abdabda", false},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			res := validPalindrome(tt.input)
			assert.Equal(t, tt.output, res)
		})
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			res := validPalindrome2(tt.input)
			assert.Equal(t, tt.output, res)
		})
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			res := validPalindrome3(tt.input)
			assert.Equal(t, tt.output, res)
		})
	}
}
